/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    output reg a,
    output reg b,
    output reg c,
    input sum,
    input carry
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [8-1:0] M_state_m_pass;
  wire [8-1:0] M_state_m_fail;
  wire [8-1:0] M_state_m_manual;
  wire [8-1:0] M_state_m_count;
  wire [8-1:0] M_state_m_io_seg;
  wire [4-1:0] M_state_m_io_sel;
  wire [1-1:0] M_state_m_a;
  wire [1-1:0] M_state_m_b;
  wire [1-1:0] M_state_m_c;
  reg [1-1:0] M_state_m_sum;
  reg [1-1:0] M_state_m_carry;
  reg [1-1:0] M_state_m_start;
  reg [1-1:0] M_state_m_switch1;
  reg [1-1:0] M_state_m_switch2;
  reg [1-1:0] M_state_m_a_m;
  reg [1-1:0] M_state_m_b_m;
  reg [1-1:0] M_state_m_c_m;
  state_m_2 state_m (
    .clk(clk),
    .rst(rst),
    .sum(M_state_m_sum),
    .carry(M_state_m_carry),
    .start(M_state_m_start),
    .switch1(M_state_m_switch1),
    .switch2(M_state_m_switch2),
    .a_m(M_state_m_a_m),
    .b_m(M_state_m_b_m),
    .c_m(M_state_m_c_m),
    .pass(M_state_m_pass),
    .fail(M_state_m_fail),
    .manual(M_state_m_manual),
    .count(M_state_m_count),
    .io_seg(M_state_m_io_seg),
    .io_sel(M_state_m_io_sel),
    .a(M_state_m_a),
    .b(M_state_m_b),
    .c(M_state_m_c)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    a = 1'h0;
    b = 1'h0;
    c = 1'h0;
    io_seg = M_state_m_io_seg;
    io_sel = M_state_m_io_sel;
    M_state_m_sum = sum;
    M_state_m_carry = carry;
    a = M_state_m_a;
    b = M_state_m_b;
    c = M_state_m_c;
    M_state_m_a_m = io_dip[0+0+0-:1];
    M_state_m_b_m = io_dip[8+0+0-:1];
    M_state_m_c_m = io_dip[16+0+0-:1];
    M_state_m_switch1 = io_button[0+0-:1];
    M_state_m_switch2 = io_button[2+0-:1];
    M_state_m_start = io_button[1+0-:1];
    led = M_state_m_manual;
    io_led[8+7-:8] = M_state_m_count;
    io_led[0+7-:8] = M_state_m_pass;
    io_led[16+7-:8] = M_state_m_fail;
  end
endmodule
